# $Id: pkg_replace.conf.in,v 1.2 2007/01/25 12:25:56 securedog Exp $

# Environment variables: string
#
# cf. pkg(8), pkg-add(8), pkg_replace(1), ports(7), packages(7)
#
# PORTSDIR="/usr/ports"
# PKGREPOSITORY="/var/cache/pkg"
# PACKAGEROOT="ftp://ftp.FreeBSD.org"
# PKG_BINARY_SUFX=".pkg"
# PKG_BACKUP_DIR="${PKGREPOSITORY}"
# PKG_DBDIR="/var/db/pkg"
# PKG_TMPDIR="/var/tmp"
# PKGCOMPATDIR="/usr/local/lib/compat/pkg"
#
# Alternative locations for pkg_install: string
#
# PKG_ADD="/usr/sbin/pkg add"
# PKG_CREATE="/usr/sbin/pkg create"
# PKG_DELETE="/usr/sbin/pkg delete"
# PKG_INFO="/usr/sbin/pkg info"

# Advanced settings:
#
# See the examples below.
#
# Hints:
#   * `Keys' match the package name or the package directory
#       e.g.
#         name       = pkg_replace-VERSION, pkg_replace
#         directory  = sysutils/pkg_replace
#   * `Keys' and `values' must be quoted
#   * Parentheses `{ }' may be replaced with `( );'
#   * Commas are optional
#
# Syntax:
#   string:
#       name='value ...'
#
#   array:
#       name={
#         'key' [,]
#         ...
#       }
#
#   hash:
#       name={
#	      'key' => 'value' [,]
#         ...
#       }

# PKG_REPLACE: string
#
# Options that are passed to pkg_replace(1) automatically.
#
# PKG_REPLACE="-bv -l /root/pkg_replace.log -L /var/log/pkg/"

# PKG_REPLACE_DB_DIR: string
#
# Temporary directory for saving build dependencies of each ports.
#
# PKG_REPLACE_DB_DIR="/var/tmp/pkg_replace"

# IGNORE: array
#
# List of packages that do not use pkg_replace(1) to upgrade.
# You can override this with the -f option.
#
# IGNORE= {
#  'bsdpan-*'
#  'perl'
#  'xorg-libraries'
#  'firefox-2.[0-9]*'
#  '*openoffice*'
# }

# USE_PKGS: array
#
# List of packages that prefer to use binary packages to upgrade.
#
# USE_PKGS= {
#  'perl'
#  'ruby'
#  'python'
#  'firefox'
#  '*openoffice*'
# }

# BEFOREBUILD: hash
# BEFOREDEINSTALL: hash
# AFTERINSTALL: hash
#
# Lists of commands that will be executed in the process of building,
# installing and deinstalling.
#
# BEFOREBUILD= {
#  # Do 'cvs update' for each port
#  '*' => 'cvs update'
#
#  # Do 'make config' for each port
#  '*' => '${MAKE} config'
# }
#
# BEFOREDEINSTALL= {
#  # Run the script to stop the service, if any
#  '*' => 'cmd_stop_rc "$1"'
#
#  # Record the installation
#  '*' => 'echo "`date +%Y-%m-%d`: delete: $1" >> /var/log/pkg/history'
#
#  # Stop postfix
#  'mail/postfix*' => '/usr/local/sbin/postfix stop'
# }
#
# AFTERINSTALL= {
#  # Run the script to start the service, if any
#  '*' => 'cmd_start_rc "$1"'
#
#  # Record the installation
#  '*' => 'echo "`date +%Y-%m-%d`: install: $1" >> /var/log/pkg/history'
#
#  # Start postfix
#  'mail/postfix*' => '/usr/local/sbin/postfix start'
# }

# MAKE_ARGS: hash
#
# List of options that are passed to make(1) automatically.
#
MAKE_ARGS= {
#    'py27-*' => 'FLAVOR=py27'
#    'py34-*' => 'FLAVOR=py34'
#    'py35-*' => 'FLAVOR=py35'
#    'py36-*' => 'FLAVOR=py36'
#    'php56-*' => 'FLAVOR=php56'
#    'php70-*' => 'FLAVOR=php70'
#    'php71-*' => 'FLAVOR=php71'
#    'php72-*' => 'FLAVOR=php72'
#  'xorg-server'  => 'NO_SUID_XSERVER=yes'
#  'editors/vim'  => '-DWITH_GTK2 -DWITH_PERL -DWITH_RUBY -DWITH_PYTHON'
#  'www/apache2*' => 'WITH_PROXY_MODULES=yes'
#  'www/apache2*' => 'WITH_SUEXEC_MODULES=yes'
}
#

# MAKE_ENV: hash
#
# List of environment variables that prepend to make(1) automatically.
#
# MAKE_ENV= {
#  'xorg-server'  => 'PATH=/opt/bin'
# }
#

# User-Defined Functions
#
# Exampls as follows.
#
# BEFOREBUILD={
#   '*' => 'my_test "$@"'
#   '*' => 'my_make_config'
# }
#
# my_test() {
#    echo "pkgname $1"
#    echo "pkgorigin $2"
#    expr "Hello World" : '\([^ ]*\)'
# }
#
# my_make_config() {
#    case `id -u` in
#    0)    sudo= ;;
#    *)    sudo="sudo" ;;
#    esac
#    $sudo make config
# }
