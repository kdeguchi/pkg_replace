#!/bin/sh -fu
#
# Copyright (C) 2006, 2007 Securedog
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# $Id: pkg_replace.sh,v 1.40 2008/04/03 20:00:22 securedog Exp $

PKG_REPLACE_VERSION=20080205
PKG_REPLACE_CONFIG=FreeBSD

usage() {
	echo "usage: ${0##*/} [-habBcCfFiJknNOpPPqrRuvVwW] [-l file] [-L prefix]"
	echo "        [-m make_args] [-x pkgname] [[pkgname[=package]] [package] ...]"
	exit 1
}

isempty() {
	case ${@:+1} in
	'')	return 0 ;;
	*)	return 1 ;;
	esac
}

istrue() {
	case ${1:-0} in
	0)	return 1 ;;
	*)	return 0 ;;
	esac
}

warn() {
	echo "** ${@-}" >&2
}

info() {
	echo "--->  ${@-}"
}

prompt_yesno() {
	echo -n "${1-OK?} [${2-yes}] " >&2
	read X <&1

	case ${X:-${2-yes}} in
	[Yy][Ee][Ss]|[Yy])
		return 0 ;;
	*)	return 1 ;;
	esac
}

init_options() {
	opt_all=0
	opt_backup=1
	opt_batch=0
	opt_keep_backup=0
	opt_beforeclean=0
	opt_afterclean=1
	opt_force=0
	opt_fetch=0
	opt_interactive=0
	opt_build=0
	opt_keep_going=0
	opt_result=
	opt_log_prefix=
	opt_make_args=
	opt_noexecute=0
	opt_new=0
	opt_omit_check=0
	opt_package=0
	opt_use_packages=0
	opt_noconf=0
	opt_depends=0
	opt_required_by=0
	opt_preserve_libs=1
	opt_verbose=0
	opt_version=0
	opt_exclude=
	do_upgrade=0
	do_logging=
	install_pkgs=
	upgrade_pkgs=
	replace_pkgs=
	failed_pkgs=
	MAKE_ARGS=
	BEFOREBUILD=
	BEFOREDEINSTALL=
	AFTERINSTALL=
	IGNORE=
	USE_PKGS=
}

init_variables() {
	: ${PORTSDIR="/usr/ports"}
	: ${PKGREPOSITORY="${PORTSDIR}/packages/All"}
	: ${PACKAGEROOT="ftp://ftp.FreeBSD.org"}
	: ${PKG_SUFX=".tbz"}
	: ${PKG_FETCH="fetch"}
	: ${PKG_BACKUP_DIR=${PKGREPOSITORY}}
	: ${PKG_DBDIR="/var/db/pkg"}
	: ${PKG_TMPDIR=${TMPDIR:-"/var/tmp"}}
	: ${PKGCOMPATDIR="/usr/local/lib/compat/pkg"}

	tmpdir=
	set_signal_int=
	set_signal_exit=
	init_pkgtools

	export PORTSDIR PKG_DBDIR PKG_TMPDIR PKG_SUFX PKGCOMPATDIR
}

init_pkgtools() {
	PKG_ADD="pkg_add"
	PKG_CREATE="pkg_create"
	PKG_DELETE="pkg_delete"
	PKG_INFO="pkg_info"
	PKGDB=
	MAKE="make"
}

parse_options() {
	local long_opts long_optind

	optind=1
	long_opts=
	long_optind=0

	for X in ${1+"$@"}; do
		case $X in
		--)	break ;;
		--*)	shift
			long_opts="${long_opts} ${X#--}"
			long_optind=$((long_optind+1)) ;;
		*)	shift; set -- ${1+"$@"} "$X" ;;
		esac
	done

	for X in ${long_opts}; do
		case $X in
		batch)		opt_batch=1 ;;
		noconfig)	opt_noconf=1 ;;
		version)	echo ${PKG_REPLACE_VERSION}; exit 0 ;;
		*)	usage ;;
		esac
	done

	while getopts habBcCfFiJkl:L:m:nONpPqrRuvVwWx: X; do
		case $X in
		a)	opt_all=1 ;;
		b)	opt_keep_backup=1 ;;
		B)	opt_backup=0 ;;
		c)	opt_beforeclean=1 ;;
		C)	opt_afterclean=1 ;;
		f)	opt_force=1 ;;
		F)	opt_fetch=1 ;;
		i)	opt_interactive=1 ;;
		J)	opt_build=1 ;;
		k)	opt_keep_going=1 ;;
		l)	expand_path 'opt_result' "${OPTARG}" ;;
		L)	expand_path 'opt_log_prefix' "${OPTARG}" ;;
		m)	opt_make_args="${opt_make_args} ${OPTARG}" ;;
		n)	opt_noexecute=1 ;;
		N)	opt_new=1 ;;
		O)	opt_omit_check=1 ;;
		p)	opt_package=1 ;;
		P)	opt_use_packages=$((opt_use_packages+1)) ;;
		q)	opt_noconf=1 ;;
		r)	opt_required_by=1 ;;
		R)	opt_depends=1 ;;
		u)	opt_preserve_libs=0 ;;
		v)	opt_verbose=1 ;;
		V)	opt_version=1 ;;
		w)	opt_beforeclean=0 ;;
		W)	opt_afterclean=0 ;;
		x)	opt_exclude="${opt_exclude} ${OPTARG}" ;;
		*)	usage ;;
		esac
	done

	optind=$((OPTIND+long_optind))
}

parse_args() {
	local p pattern package _pkgs _deps

	for ARG in ${1+"$@"}; do
		package=
		case ${ARG} in
		\\*)	ARG=${ARG#\\} ;;
		?*=*)	package=${ARG#*=}; ARG=${ARG%%=*} ;;
		esac

		# upgrade
		case ${ARG} in
		*.t[bg]z)
			package=${ARG}
			get_pkg_binary_name 'pattern' "${package}" || continue
			pattern=${pattern%-*} ;;
		*)
			pattern=${ARG##*/} ;;
		esac

		if ! {
			case ${package} in
			*.t[bg]z)
				expand_path 'package' "${package}" && [ -e "${package}" ] ;;
			?*)	strip_pkgpath 'package' "${package}" && [ -d "${PORTSDIR}/${package}" ] ;;
			esac
		}; then
			warn "No such file or package: ${package}"
			continue
		fi

		if get_installed_pkgname '_pkgs' "${pattern}"; then
			for p in ${_pkgs}; do
				if istrue ${opt_depends}; then
					get_pkgdep '_deps' "$p"
					upgrade_pkgs="${upgrade_pkgs} ${_deps}"
				fi

				upgrade_pkgs="${upgrade_pkgs} $p"

				if istrue ${opt_required_by}; then
					get_pkg_required_by '_deps' "$p"
					upgrade_pkgs="${upgrade_pkgs} ${_deps}"
				fi
			done

			replace_pkgs="${replace_pkgs}${package:+ ${p}=${package}}"
		elif ! istrue ${opt_new}; then
			warn "No such installed package: ${pattern}"
		else
			# install
			if {
				case ${ARG} in
				*.t[bg]z)
					expand_path 'package' "${ARG}" && [ -e "${package}" ] ;;
				*)	strip_pkgpath 'package' "${ARG}" && [ -d "${PORTSDIR}/${package}" ] ;;
				esac
			}; then
				install_pkgs="${install_pkgs} ${package}"
			else
				warn "No such file or package: ${ARG}"
			fi
		fi
	done
}

parse_config() {
	local _line _var _val _array _func

	[ -r "$1" ] || return 0

	_line=0
	_array=
	_func=

	while read -r X; do
		_line=$((${_line}+1))

		case $X in
		''|\#*)	continue ;;
		esac

		case ${_func:+function}${_array:+array} in
		function)
			_func="${_func}
$X"
			case $X in
			'}'|'};')
				eval "${_func}"
				_func= ;;
			esac ;;
		array)
			case $X in
			*[\'\"]?*[\'\"]*)
				_var=${X#*[\'\"]}
				_var=${_var%%[\'\"]*}

				case $X in
				*=\>*[\'\"]*[\'\"]*)
					_val=${X#*=\>*[\'\"]}
					_val=${_val%[\'\"]*}
					eval ${_array}='"${'${_array}':+$'${_array}'
}${_var}=${_val}"' ;;
				*)
					eval ${_array}='"$'${_array}' ${_var}"' ;;
				esac ;;
			[\)}]|[\)}]\;)
				_array= ;;
			*)
				warn "Syntax error at line ${_line}: $X"
				return 1 ;;
			esac ;;
		*)
			case $X in
			*\(\)|*\(\)*{)
				_var=${X%%\(\)*}
				_var=${_var%${_var##*[! ]}}
				_func="$X" ;;
			?*=*)
				_var=${X%%=*}
				_val=${X#*=} ;;
			*)	_var="syntax-error" ;;
			esac

			case ${_var} in
			*[!0-9A-Za-z_]*|[0-9]*)
				warn "Syntax error at line ${_line}: $X"
				return 1 ;;
			esac

			case ${_func:+1} in
			1)	continue ;;
			esac

			case ${_val} in
			*[\({])
				eval ${_var}=; _array=${_var} ;;
			*)	eval ${_var}=${_val} ;;
			esac ;;
		esac
	done < "$1"
}

config_match() {
	case "|${pkg_name}|${pkg_name%-*}|${pkg_origin}|" in
	*\|$1\|*)
		return 0 ;;
	*)	return 1 ;;
	esac
}

has_config() {
	local _config

	eval _config=\$$1
	for X in ${_config}; do
		if config_match "${X%%=*}"; then
			return 0
		fi
	done
	return 1
}

get_config() {
	local IFS _config

	IFS='
'
	eval _config=\$$2
	eval $1=
	for X in ${_config}; do
		if config_match "${X%%=*}"; then
			eval $1='"${'$1':+$'$1'${3- }}${X#*=}"'
		fi
	done
}

run_config_script() {
	local command

	get_config 'command' "$1" '; '
	if ! isempty ${command}; then
		info "Executing the $1 command: ${command}"
		( set +efu -- "${2:-${pkg_name-}}" "${3:-${pkg_origin-}}"; eval "${command}" )
	fi
}

run_rc_script() {
	for X in $(${PKG_INFO} -qL "$1"); do
		case $X in
		*.sample) ;;
		*/etc/rc.d/*)
			if [ -x "$X" ]; then
				info "Executing '$X $2'"
				try "$X" "$2"
			fi ;;
		esac
	done
}

cmd_start_rc() {
	run_rc_script "$1" start
}

cmd_stop_rc() {
	run_rc_script "$1" stop
}

cmd_restart_rc() {
	run_rc_script "$1" restart
}

load_config() {
	if ! isempty ${1-} && ! istrue ${opt_noconf}; then
		istrue ${opt_verbose} && info "Loading $1"

		parse_config "$1" || {
			warn "Fatal error in $1."
			exit 1
		}
	fi
}

load_make_vars() {
	get_config 'PKG_MAKE_ARGS' 'MAKE_ARGS'
	PKG_MAKE_ARGS="${opt_make_args:+${opt_make_args} }${PKG_MAKE_ARGS}"
	PKG_MAKE="${MAKE}${PKG_MAKE_ARGS:+ ${PKG_MAKE_ARGS}}"
}

load_upgrade_vars() {
	PKG_MAKE="${PKG_MAKE} UPGRADE_TOOL=pkg_replace UPGRADE_PORT=$1 UPGRADE_PORT_VER=${1##*-}"
}

load_env_vars() {
	set -- ${PKG_REPLACE_ENV=$(uname -smr)}

	OPSYS=$1
	OS_VERSION=$2
	OS_REVISION=${OS_VERSION%%[-_]*}
	OS_MAJOR=${OS_REVISION%%.*}
	ARCH=$3
}

load_extract_pkg_vars() {
	case $1 in
	*.tbz)	EXTRACT_PKG="j" ;;
	*.tgz)	EXTRACT_PKG="z" ;;
	*)	return 1 ;;
	esac

	EXTRACT_PKG="tar x${EXTRACT_PKG}f"

	EXTRACT_PKG_CONTENTS="-O --fast-read +CONTENTS"
}

get_ports_pref() {
	cd "${PORTSDIR}" || return 1
	eval $1='$(${MAKE} BEFOREPORTMK=yes -V$2 -f "Mk/bsd.port.mk")'
}

get_ports_subdirs() {
	eval $1=
	if [ -r "$2/Makefile" ]; then
		while read X; do
			case $X in
			\#*) ;;
			'.include <bsd.port.subdir.mk>')
				break ;;
			*SUBDIR*+=*)
				X=${X#*=}
				X=${X#${X%%[!	 ]*}}	# trim whitespace
				eval $1='"${'$1':+${'$1'} }$X"' ;;
			esac
		done < "$2/Makefile"
	fi
}

get_pkgname() {
	load_make_vars ${pkg_name=} ${pkg_origin=}

	if {
		cd "$2" &&
		X=$(${PKG_MAKE} -VPKGNAME) &&
		! isempty $X
	}; then
		eval $1=\$X
	else
		return 1
	fi
}

get_installed_pkgname() {
	__pkg=
	case $2 in
	*[\<\>]*)
		__pkg=$(${PKG_INFO} -E "$2") ;;
	*)
		set +f
		for X in ${PKG_DBDIR}/$2*/; do
			X=${X%/}; X=${X##*/}
			case ":$X:${X%-*}:" in
			*\**)	break ;;
			*:$2:*)	__pkg="${__pkg:+${__pkg} }$X" ;;
			esac
		done
		set -f ;;
	esac

	isempty ${__pkg} && return 1
	eval $1=\${__pkg}
}

get_installed_pkgname_s() {
	get_installed_pkgname 'X' "$2" && eval $1=\${X%%[\$IFS]*}
}

get_deorigin() {
	X=$(${PKG_INFO} -qO "$2")
	istrue $X && eval $1=\$X
}

get_pkg_binary_name() {
	load_extract_pkg_vars "$2" || return 1

	X=`${EXTRACT_PKG} "$2" ${EXTRACT_PKG_CONTENTS} | while read X; do
		case $X in
		@name\ *)	echo "${X#@name }"; break ;;
		[!@]*)	break ;;
		esac
	done`

	if isempty $X; then
		warn "'$2' is not a valid package."
		return 1
	fi
	eval $1=\$X
}

get_pkg_binary_path() {
	load_extract_pkg_vars "$2" || return 1

	X=`${EXTRACT_PKG} "$2" ${EXTRACT_PKG_CONTENTS} | while read X; do
		case $X in
		@comment\ ORIGIN:*)
			echo "${X#@comment ORIGIN:}"
			break ;;
		[!@]*)	break ;;
		esac
	done`
	eval $1=\$X
}

get_pkg_binary_depends() {
	load_extract_pkg_vars "$2" || return 1

	X=`${EXTRACT_PKG} "$2" ${EXTRACT_PKG_CONTENTS} | while read X; do
		case $X in
		@pkgdep\ *)
			N=${X#@pkgdep } ;;
		@comment\ DEPORIGIN:*)
			echo "${N}:${X#@comment DEPORIGIN:}" ;;
		[!@]*)	break ;;
		esac
	done`
	eval $1=\$X
}

get_pkgpath() {
	eval $1=
	if [ -r "${PKG_DBDIR}/$2/+CONTENTS" ]; then
		while read X; do
			case $X in
			@comment\ ORIGIN:*)
				eval $1=\${X#@comment ORIGIN:}
				break ;;
			[!@]*)	break ;;
			esac
		done < "${PKG_DBDIR}/$2/+CONTENTS"
	fi
}

get_pkgdep() {
	eval $1=
	if [ -r "${PKG_DBDIR}/$2/+CONTENTS" ]; then
		while read X; do
			case $X in
			@pkgdep\ *)
				eval $1='"$'$1' ${X#@pkgdep }"' ;;
			[!@]*)	break ;;
			esac
		done < "${PKG_DBDIR}/$2/+CONTENTS"
	fi
}

get_pkg_required_by() {
	eval $1=
	if [ -r "${PKG_DBDIR}/$2/+REQUIRED_BY" ]; then
		while read X; do
			eval $1='"$'$1' $X"'
		done < "${PKG_DBDIR}/$2/+REQUIRED_BY"
	fi
}

strip_pkgpath() {
	local IFS
	X=$1
	IFS='/'; set -- ${2#${PORTSDIR}/}
	IFS=' '; set -- ${1+$@}
	IFS='/'; eval $X='${1+"$*"}'
}

set_pkginfo() {
	[ -d "${PKG_DBDIR}/$1" ] || return 1
	[ -e "${PKG_DBDIR}/$1/+IGNOREME" ] && return 1

	pkg_name=$1
	pkg_pkgdir=${PKG_DBDIR}/$1
	get_pkgpath 'pkg_origin' "$1"
	pkg_portdir=${PORTSDIR}/${pkg_origin}
	pkg_binary=
}

set_portinfo() {
	pkg_name=${1##*/}
	pkg_origin=${1#${PORTSDIR}/}
	pkg_portdir=${PORTSDIR}/${pkg_origin}
	get_pkgname 'pkg_name' "${pkg_portdir}" || return 1
	pkg_pkgdir=${PKG_DBDIR}/${pkg_name}
	pkg_binary=
}

set_pkginfo_binary() {
	get_pkg_binary_name 'pkg_name' "$1" || return 1
	pkg_pkgdir=${PKG_DBDIR}/${pkg_name}
	get_pkg_binary_path 'pkg_origin' "$1"
	pkg_portdir=${PORTSDIR}/${pkg_origin}
	pkg_binary=$1
}

pkg_sort() {
	local _ret _sorted _unsorted _deps

	_ret=$1; shift
	_sorted=
	_unsorted=

	case $# in
	1)	eval ${_ret}=\$@; return 0 ;;
	esac

	for Y in ${1+"$@"}; do
		case " ${_sorted}${_unsorted} " in
		*" $Y "*)	continue ;;
		esac

		if [ -s "${PKG_DBDIR}/$Y/+REQUIRED_BY" ]; then
			get_pkgdep '_deps' "$Y"
			for X in ${_deps}; do
				case " ${_sorted}${_unsorted} " in
				*" $X "*)	continue ;;
				esac
				case " $* " in
				*" $X "*)	_sorted="${_sorted} $X" ;;
				esac
			done

			_sorted="${_sorted} $Y"
		else
			_unsorted="${_unsorted} $Y"
		fi
	done

	eval ${_ret}=\${_sorted}\${_unsorted}
}

create_tmpdir() {
	if isempty ${tmpdir}; then
		tmpdir=$(mktemp -d "${PKG_TMPDIR}/${0##*/}.XXXXXX") || {
			warn "Couldn't create the working directory."
			return 1
		}
	fi
}

clean_tmpdir() {
	if ! isempty ${tmpdir}; then
		try rmdir "${tmpdir}" ||
			warn "Couldn't remove the working direcotry: ${tmpdir}"
		tmpdir=
	fi
}

create_file() {
	if ! true > "$1"; then
		warn "Failed to create file: $1"
		return 1
	fi
}

create_dir() {
	if [ ! -d "$1" ]; then
		try mkdir -p "$1" || return 1
	fi
}

expand_path() {
	case $2 in
	[!/]*)	eval $1='"${PWD:-`pwd`}/${2#./}"' ;;
	*)	eval $1=\$2 ;;
	esac
}

try() {
	"$@" || {
		errno=$?
		warn "Command failed (exit code ${errno}): $@"
		return ${errno}
	}
}

xtry() {
	if isempty ${do_logging}; then
		try "$@" || return $?
	else
		try script -qa "${do_logging}" "$@" || return $?
	fi
}

build_package() {
	local build_args

	build_args=

	if istrue ${opt_fetch}; then
		build_args="-DBATCH checksum"

		info "Fetching '$1'"
	else
		istrue ${opt_package} && build_args="DEPENDS_TARGET=package"
		istrue ${opt_batch} && build_args="${build_args} -DBATCH"

		info "Building '$1'${PKG_MAKE_ARGS:+ with make flags: ${PKG_MAKE_ARGS}}"
	fi

	cd "$1" || return 1

	if ! istrue ${opt_fetch}; then
		run_config_script 'BEFOREBUILD'

		if istrue ${opt_beforeclean}; then
			clean_package "$1" || return 1
		fi
	fi

	xtry ${PKG_MAKE} ${build_args} || return 1
}

install_pkg_binary_depends() {
	local depends depname deporigin installed_pkg

	info "Installing dependencies for '$1'"

	get_pkg_binary_depends 'depends' "$1"
	for X in ${depends}; do
		depname=${X%:*}
		deporigin=${X##*:}

		if {
			get_installed_pkgname 'installed_pkg' "${depname%-*}" ||
			get_deorigin 'installed_pkg' "${deporigin}"
		}; then
			info " Required installed package: ${depname} - installed"
		else
			info " Required installed package: ${depname} - not installed"
			( opt_build=0; do_install "${deporigin}" && [ "${result}" = done ] ) || {
				warn "Failed to install '${deporigin}'"
				return 1
			}
			info "Returning to install of '$1'"
		fi
	done
}

install_pkg_binary() {
	local install_args

	install_args=

	info "Installing '$1'"

	istrue ${opt_force} && install_args="-f"
	istrue ${opt_verbose} && install_args="${install_args} -v"

	xtry ${PKG_ADD} ${install_args} "$1" || return 1

	run_config_script 'AFTERINSTALL'
}

install_package() {
	local install_args

	install_args=

	info "Installing '$1'"

	istrue ${opt_force} && install_args="-DFORCE_PKG_REGISTER"
	istrue ${opt_package} && install_args="${install_args} DEPENDS_TARGET=package"
	istrue ${opt_batch} && install_args="${install_args} -DBATCH"

	cd "$1" || return 1

	xtry ${PKG_MAKE} ${install_args} reinstall || return 1

	if istrue ${opt_package}; then
		xtry ${PKG_MAKE} ${install_args} package || return 1
	fi

	if istrue ${opt_afterclean}; then
		clean_package "$1"
	fi

	run_config_script 'AFTERINSTALL'
}

deinstall_package() {
	local deinstall_args

	deinstall_args=
	istrue ${do_upgrade} || istrue ${opt_force} && deinstall_args="-f"
	istrue ${opt_verbose} && deinstall_args="${deinstall_args} -v"

	info "Deinstalling '$1'"

	if [ ! -w "${PKG_DBDIR}" ]; then
		warn "You do not own ${PKG_DBDIR}."
		return 1
	fi

	run_config_script 'BEFOREDEINSTALL' "$1"

	try ${PKG_DELETE} ${deinstall_args} "$1" || return 1
}

clean_package() {
	local clean_args

	clean_args=

	info "Cleaning '$1'"

	cd "$1" || return 1
	try ${PKG_MAKE} ${clean_args} clean || return 1
}

do_fetch() {
	local fetch_cmd fetch_args fetch_path

	fetch_path=${2:-${1##*/}}
	fetch_cmd=${PKG_FETCH%%[$IFS]*}
	fetch_args=${PKG_FETCH#${fetch_cmd}}

	case ${fetch_cmd##*/} in
	curl|fetch|ftp)	fetch_args="${fetch_args} -o ${fetch_path}" ;;
	wget)	fetch_args="${fetch_args} -O ${fetch_path}" ;;
	esac

	case ${fetch_path} in
	*/*)	cd "${fetch_path%/*}/" || return 1 ;;
	esac

	try ${fetch_cmd} ${fetch_args} "$1"

	if [ ! -s "${fetch_path}" ]; then
		warn "Failed to fetch: $1"
		try rm -f "${fetch_path}"
		return 1
	fi
}

fetch_package() {
	local pkg uri uri_path

	pkg=$1${PKG_SUFX}
	if [ -e "${PKGREPOSITORY}/${pkg}" ]; then
		return 0
	elif ! create_dir "${PKGREPOSITORY}" || [ ! -w "${PKGREPOSITORY}" ]; then
		warn "You do not own ${PKGREPOSITORY}."
		return 1
	fi

	load_env_vars

	if ! isempty ${PACKAGESITE-}; then
		uri="${PACKAGESITE}${pkg}"
	else
		case ${OS_VERSION} in
		*-CURRENT)	X="${OS_MAJOR}-current" ;;
		*-RELEASE*)	X="${OS_REVISION}-release" ;;
		*)		X="${OS_MAJOR}-stable" ;;
		esac

		uri_path="/pub/FreeBSD/ports/${ARCH}/packages-$X/All/"
		uri="${PACKAGEROOT}${uri_path}${pkg}"
	fi

	do_fetch "${uri}" "${PKGREPOSITORY}/${pkg}" || return 1
}

find_package() {
	X="${PKGREPOSITORY}/$2${PKG_SUFX}"

	if [ -e "$X" ]; then
		info "Found a package of '$2': $X"
		eval $1=\$X
	else
		return 1
	fi
}

create_package() {
	try ${PKG_CREATE} -b "$1" "$2" || return 1
}

backup_package() {
	if istrue ${opt_backup} && [ ! -e "$2" ]; then
		info "Backing up the old version"
		create_package "$1" "$2" || [ -s "$2" ] || return 1
	fi
}

backup_file() {
	if [ -e "$1" ]; then
		info "Backing up the ${1##*/} file"
		try cp -f "$1" "$2" || return 1
	fi
}

restore_package() {
	if [ -e "$1" ]; then
		info "Restoring the old version"
		install_pkg_binary "$1" || return 1
	else
		return 1
	fi
}

restore_file() {
	if [ -e "$1" ] && [ ! -e "$2" ]; then
		info "Restoring the ${1##*/} file"
		try mv -f "$1" "$2" || return 1
	fi
}

process_package() {
	if istrue ${opt_keep_backup} && [ -e "$1" ] && [ ! -e "${PKG_BACKUP_DIR}/${1##*/}" ]; then
		info "Keeping the old version in '${PKG_BACKUP_DIR}'"
		create_dir "${PKG_BACKUP_DIR}" || return 1
		try mv -f "$1" "${PKG_BACKUP_DIR}" || return 1
	fi
}

preserve_libs() {
	istrue ${opt_preserve_libs} || return 0

	preserved_files=
	for X in $(${PKG_INFO} -qL "$1"); do
		case ${X##*/} in
		lib*.so.[0-9]*)
			[ -f "$X" ] && [ ! -L "$X" ] && preserved_files="${preserved_files} $X" ;;
		esac
	done

	if ! isempty ${preserved_files}; then
		info "Preserving the shared libraries"
		create_dir "${PKGCOMPATDIR}" || return 1
		try cp -f ${preserved_files} "${PKGCOMPATDIR}" || return 1
	fi
}

clean_libs() {
	local delete_files dest

	if ! istrue ${opt_preserve_libs} || isempty ${preserved_files}; then
		return 0
	fi

	info "Cleaning the preserved shared libraries"

	delete_files=
	for X in ${preserved_files}; do
		dest="${PKGCOMPATDIR}/${X##*/}"

		if [ -e "$X" ]; then
			delete_files="${delete_files} ${dest}"
		else
			info "Keeping $X as ${dest}"
		fi
	done

	if ! isempty ${delete_files}; then
		try rm -f ${delete_files} || return 1
	fi
}

modify_pkgdep() {
	local f o

	f=${PKG_DBDIR}/$1/+CONTENTS
	o=${f}.$$

	sed "s/^@pkgdep $2\$/@pkgdep $3/" "$f" > "$o" && try mv -f "$o" "$f" || return 1
}

update_pkgdep() {
	local _deps

	info "Replacing dependencies: '$1' -> '$2'"

	get_pkg_required_by '_deps' "$2"
	for X in ${_deps}; do
		modify_pkgdep "$X" "$1" "$2"
	done
}

fix_pkgdep() {
	local installed_pkg pkgdep deporigin

	if [ -r "${PKG_DBDIR}/$1/+CONTENTS" ]; then
		while read X; do
			case $X in
			@pkgdep\ *)
				pkgdep=${X#@pkgdep } ;;
			@comment\ DEPORIGIN:*)
				deporigin=${X#@comment DEPORIGIN:}

				if [ ! -d "${PKG_DBDIR}/${pkgdep}" ]; then
					info "Stale dependency: $1 -> ${pkgdep}:"

					if get_deorigin 'installed_pkg' "${deporigin}"; then
						modify_pkgdep "$1" "${pkgdep}" "${installed_pkg}"
						info "Fixed. (-> ${installed_pkg})"
					else
						info "Skipped."
					fi
				fi ;;
			[!@]*)	break ;;
			esac
		done < "${PKG_DBDIR}/$1/+CONTENTS"
	fi
}

update_pkgdb() {
	case ${PKGDB##*/} in
	spkgdb)
		${PKGDB} -aFO "$1" || return 1 ;;
	pkgdb)
		${PKGDB} -aFO || return 1 ;;
	*)
		fix_pkgdep "$1" || return 1 ;;
	esac
}

parse_moved() {
	local IFS _ret _info _pkgpath _moved _date _why _checked

	_ret=$1; eval $1=
	_info=$2; eval $2=
	_pkgpath=$3
	_checked=

	IFS='|'
	while X=$(grep "^${_pkgpath}|" "${PORTSDIR}/MOVED"); do
		set -- $X
		_pkgpath=${1-}; _moved=${2-}; _date=${3-}; _why=${4-}

		case "$#:${_checked}:" in
		[!4]:*|?:*:${_moved}:*)
			warn "MOVED may be broken"
			return 1
		esac

		_checked="${_checked}:${_pkgpath}"
		_pkgpath=${_moved}
		eval ${_info}='"${_why} (${_date})"'

		if isempty ${_moved}; then
			eval ${_ret}=removed
			break
		elif [ -e "${PORTSDIR}/${_moved}/Makefile" ]; then
			eval ${_ret}=\${_moved}
			break
		fi
	done
}

trace_moved() {
	local moved reason

	parse_moved 'moved' 'reason' "${1#${PORTSDIR}/}" || return 1

	case ${moved} in
	'')
		return 1 ;;
	removed)
		warn "'$1' has removed from ports tree:"
		warn "    ${reason}"
		return 1 ;;
	*)
		warn "'$1' has moved to '${moved}':"
		warn "    ${reason}"

		pkg_origin=${moved}
		pkg_portdir=${PORTSDIR}/${moved} ;;
	esac
}

init_result() {
	log_file="${tmpdir}/${0##*/}.log"
	log_format="+:done -:ignored *:skipped !:failed"
	log_length=0
	log_summary=

	create_file "${log_file}" || return 1

	for X in ${log_format}; do
		eval cnt_${X#*:}=0
		eval log_sign_${X#*:}=${X%%:*}
		log_summary="${log_summary:+${log_summary}, }\${cnt_${X#*:}} ${X#*:}"
	done
}

set_result() {
	log_length=$((log_length+1))
	eval cnt_$2=$((cnt_$2+1))
	eval 'echo "${log_sign_'$2'} $1${3:+ ($3)}" >> "${log_file}"'
}

show_result() {
	local _mask _descr

	istrue ${log_length} || return 0

	_mask=
	_descr=
	for X in ${log_format}; do
		case ${X#*:} in
		failed)
			istrue ${cnt_failed} || continue ;;
		skipped)
			istrue ${cnt_skipped} || continue ;;
		*)	istrue ${opt_verbose} || continue ;;
		esac

		_mask="${_mask}${X%%:*}"
		_descr="${_descr:+${_descr} / }$X"
	done

	if ! isempty ${_mask}; then
		info "Listing the results (${_descr})"

		while read X; do
			case ${X%% *} in
			["${_mask}"])
				echo "        $X" ;;
			esac
		done < "${log_file}"
	fi
}

write_result() {
	if ! isempty $1; then
		try cp -f "${log_file}" "$1" || return 0
	fi

	try rm -f "${log_file}"
}

set_signal_handlers() {
	trap "warn Interrupted.; ${set_signal_int:+${set_signal_int};} exit 1" 1 2 3 15
	trap "${set_signal_exit:--}" 0
}

set_pkginfo_install() {
	case $1 in
	*.t[bg]z)
		set_pkginfo_binary "$1" || return 1 ;;
	*)	set_portinfo "$1" || return 1 ;;
	esac
}

set_pkginfo_replace() {
	set_pkginfo "$1" || return 1

	cur_pkg_name=${pkg_name}
	cur_pkg_pkgdir=${pkg_pkgdir}

	for X in ${replace_pkgs}; do
		case ${pkg_name} in
		"${X%%=*}")
			X=${X#*=}
			case $X in
			*.t[bg]z)
				pkg_binary=$X ;;
			?*)
				pkg_origin=$X
				pkg_portdir=${PORTSDIR}/$X ;;
			esac
			break ;;
		esac
	done

	if isempty ${pkg_binary}; then
		if isempty ${pkg_origin}; then
			err="no origin recorded"
			return 1
		elif [ ! -e "${pkg_portdir}/Makefile" ]; then
			trace_moved "${pkg_origin}" || { err="removed"; return 1; }
		fi

		get_pkgname 'pkg_name' "${pkg_portdir}" || return 1
	else
		get_pkg_binary_name 'pkg_name' "${pkg_binary}" || return 1
	fi
}

do_install() {
	err=; result=
	set_pkginfo_install "$1" || {
		warn "Skipping '$1'${err:+ - ${err}}."
		result=skipped
		return 0
	}

	if ! istrue ${opt_force} && has_config 'IGNORE'; then
		info "Skipping '${pkg_name}' - ignored"
		return 0
	fi

	if get_deorigin 'cur_pkg_name' "${pkg_origin}"; then
		info "Skipping '${pkg_origin}' - '${cur_pkg_name}' is already installed"
		return 0
	fi

	info "Installing '${pkg_name}' from '$1'"

	if istrue ${opt_noexecute}; then
		result=done
		return 0
	elif istrue ${opt_interactive}; then
		prompt_yesno || return 0
	fi

	load_make_vars

	do_logging=${opt_log_prefix:+"${opt_log_prefix}${pkg_name}.log"}

	if isempty ${pkg_binary} && has_config 'USE_PKGS'; then
		if fetch_package "${pkg_name}"; then
			find_package 'pkg_binary' "${pkg_name}" || return 1
		else
			case ${opt_use_packages} in
			1)	warn "Using the source instead of the binary package." ;;
			*)	err="package not found"; return 1 ;;
			esac
		fi
	fi

	if isempty ${pkg_binary}; then
		build_package "${pkg_portdir}" || {
			err="build error"
			return 1
		}
	elif ! istrue ${opt_fetch}; then
		install_pkg_binary_depends "${pkg_binary}" || {
			err="dependency error"
			return 1
		}
	fi

	if istrue ${opt_fetch} || istrue ${opt_build}; then
		result=done
		return 0
	fi

	if {
		case ${pkg_binary} in
		'')	install_package "${pkg_portdir}" ;;
		*)	install_pkg_binary "${pkg_binary}" ;;
		esac
	}; then
		result=done
	else
		err="install error"
		return 1
	fi

	update_pkgdb "${pkg_name}" || return 1
}

do_replace() {
	local requisite_pkgs pkg_tmpdir old_package old_required_by preserved_files

	err=; result=

	if ! istrue ${opt_keep_going}; then
		get_pkgdep 'requisite_pkgs' "$1"
		for X in ${requisite_pkgs}; do
			case " ${failed_pkgs} " in
			*" ${X%-*} "*)
				info "Skipping '$1' because a requisite package '$X' failed"
				result=skipped
				return 0 ;;
			esac
		done
	fi

	set_pkginfo_replace "$1" || {
		warn "Skipping '$1'${err:+ - ${err}}."
		result=skipped
		return 0
	}

	if ! istrue ${opt_force} && has_config 'IGNORE'; then
		info "Skipping '${cur_pkg_name}' (-> ${pkg_name}) - ignored"
		return 0
	fi

	case ${pkg_name} in
	"${cur_pkg_name}")
		if istrue ${opt_force}; then
			info "Reinstalling '${pkg_name}'"
		else
			warn "No need to replace '${cur_pkg_name}'. (specify -f to force)"
			return 0
		fi ;;
	*)
		info "Replacing '${cur_pkg_name}' with '${pkg_name}'" ;;
	esac

	if istrue ${opt_noexecute}; then
		result=done
		return 0
	elif istrue ${opt_interactive}; then
		prompt_yesno || return 0
	fi

	load_make_vars

	do_logging=${opt_log_prefix:+"${opt_log_prefix}${pkg_name}.log"}

	if isempty ${pkg_binary} && has_config 'USE_PKGS'; then
		if fetch_package "${pkg_name}"; then
			find_package 'pkg_binary' "${pkg_name}" || return 1
		else
			case ${opt_use_packages} in
			1)	warn "Using the source instead of the binary package." ;;
			*)	err="package not found"; return 1 ;;
			esac
		fi
	fi

	if isempty ${pkg_binary}; then
		load_upgrade_vars "${cur_pkg_name}"

		build_package "${pkg_portdir}" || {
			err="build error"
			return 1
		}
	elif ! istrue ${opt_fetch}; then
		install_pkg_binary_depends "${pkg_binary}" || {
			err="dependency error"
			return 1
		}
	fi

	if istrue ${opt_fetch} || istrue ${opt_build}; then
		result=done
		return 0
	fi

	pkg_tmpdir="${tmpdir}/${cur_pkg_name}"
	old_required_by="${pkg_tmpdir}/+REQUIRED_BY"

	find_package 'old_package' "${cur_pkg_name}" ||
		old_package="${pkg_tmpdir}/${cur_pkg_name}${PKG_SUFX}"

	if ! {
		create_dir "${pkg_tmpdir}" &&
		backup_package "${cur_pkg_name}" "${old_package}" &&
		backup_file "${cur_pkg_pkgdir}/+REQUIRED_BY" "${old_required_by}" &&
		preserve_libs "${cur_pkg_name}"
	}; then
		err="backup error"
		try rm -rf "${pkg_tmpdir}"
		return 1
	fi

	if deinstall_package "${cur_pkg_name}"; then
		if {
			case ${pkg_binary} in
			'')
				# XXX: PKGNAME may be changed by 'make config'
				get_pkgname 'pkg_name' "${pkg_portdir}" &&
				install_package "${pkg_portdir}" ;;
			*)	install_pkg_binary "${pkg_binary}" ;;
			esac
		}; then
			result=done
			cur_pkg_pkgdir=${PKG_DBDIR}/${pkg_name}
		else
			err="install error"
			restore_package "${old_package}" || {
				warn "Failed to restore the old version," \
				"please reinstall '${old_package}' manually."
				return 1
			}
		fi
	else
		err="deinstall error"
	fi

	restore_file "${old_required_by}" "${cur_pkg_pkgdir}/+REQUIRED_BY" ||
		warn "Failed to restore the +REQUIRED_BY file."
	process_package "${old_package}" ||
		warn "Failed to keep the old version."
	clean_libs ||
		warn "Failed to remove the preserved shared libraries."
	try rm -rf "${pkg_tmpdir}" ||
		warn "Couldn't remove the working direcotry."

	case ${result} in
	done)
		update_pkgdep "${cur_pkg_name}" "${pkg_name}" || return 1
		update_pkgdb "${pkg_name}" || return 1 ;;
	*)	return 1 ;;
	esac
}

do_version() {
	err=; pkg_name=; pkg_origin=

	if set_pkginfo_replace "$1"; then
		case ${pkg_name} in
		"$1")	return 0 ;;
		esac
		has_config 'IGNORE' && err="held"
	elif isempty ${pkg_name}; then
		# XXX: has an +IGNOREME
		return 0
	else
		pkg_name=; : ${err:=skipped}
	fi

	echo "${err:+[${err}] }$1${pkg_name:+ -> ${pkg_name}}${pkg_origin:+ (${pkg_origin})}"
}

main() {
	init_variables
	init_options
	parse_options ${1+"$@"}
	shift $((optind-1))

	load_config "/usr/local/etc/pkg_replace.conf"

	isempty ${PKG_REPLACE-} || parse_options ${PKG_REPLACE}

	if istrue ${opt_all} || { istrue ${opt_version} && ! istrue $#; }; then
		opt_depends=0
		opt_required_by=0
		set -- '*'
	elif ! istrue $#; then
		usage
	fi

	parse_args ${1+"$@"}

	if ! isempty ${opt_exclude}; then
		ARGV=
		for ARG in ${install_pkgs}; do
			for X in ${opt_exclude}; do
				case "|${ARG}|${ARG##*/}|" in
				*\|$X\|*)	continue 2 ;;
				esac
			done
			ARGV="${ARGV} ${ARG}"
		done
		install_pkgs=${ARGV}

		ARGV=
		for ARG in ${upgrade_pkgs}; do
			for X in ${opt_exclude}; do
				case "|${ARG}|${ARG%-*}|" in
				*\|$X\|*)	continue 2 ;;
				esac
			done
			ARGV="${ARGV} ${ARG}"
		done
		upgrade_pkgs=${ARGV}
	fi

	if isempty ${install_pkgs} && isempty ${upgrade_pkgs}; then
		exit 1
	fi

	istrue ${opt_version} || pkg_sort 'upgrade_pkgs' ${upgrade_pkgs}

	istrue ${opt_use_packages} && USE_PKGS='*'

	if istrue ${opt_version}; then
		for ARG in ${upgrade_pkgs}; do
			do_version "${ARG}"
		done
	else
		create_tmpdir && init_result || exit 1

		set_signal_int='set_result "${ARG:-XXX}" failed "aborted"'
		set_signal_exit='show_result; write_result "${opt_result}"; clean_tmpdir'
		set_signal_handlers

		# install
		set -- ${install_pkgs}
		cnt=0

		for ARG in ${1+"$@"}; do
			do_install "${ARG}" || {
				warn "Fix the problem and try again."
				result=failed
				failed_pkgs="${failed_pkgs} ${pkg_name%-*}"
			}
			set_result "${ARG}" "${result:-ignored}" "${err}"

			eval info \"** [$((cnt+=1))/$#] - ${log_summary}\"
		done

		# upgrade
		set -- ${upgrade_pkgs}
		cnt=0
		do_upgrade=1

		for ARG in ${1+"$@"}; do
			do_replace "${ARG}" || {
				warn "Fix the problem and try again."
				result=failed
				failed_pkgs="${failed_pkgs} ${pkg_name%-*}"
			}
			set_result "${ARG}" "${result:-ignored}" "${err}"

			eval info \"** [$((cnt+=1))/$#] - ${log_summary}\"
		done

		isempty ${failed_pkgs} || exit 1
	fi

	exit 0
}

IFS=' 
'

case ${0##*/} in
pkg_replace)
	main ${1+"$@"} ;;
esac
